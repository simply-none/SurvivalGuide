###运算符类型

- **取反运算符**
  - 不管什么类型使用该运算符之后变为 Boolean 类型
  - 对一个值连续取反，等同于 Boolean()
- **与或运算符**
  - 短路机制
  - 与运算符多个连用时，若所有表达式都为 true，则返回最后一个表达式的值
  - 或运算符通常用于为变量设置默认值
    ```JavaScript
    function saveText(text) {
        text = text || '';
    }
    ```
  -
- **位运算符**
  - &,|,~,^,<<,>>,>>>
  - 位运算优点运行速度快，但不直观
  - 位运算只对整数起作用（二进制），其他类型会自动转为整数后运算，小数会舍去小数部分
  - 逐位比较，二进制采用补码形式表示
  - 一个整数连续两次~~得到自身，否运算是使用 Number()转化
  - 连续对 2 个值进行三次异或可以互换值
  - 左移/右移，乘除 2 的 n 次方
  - 无符号右移：查看负数在计算机内部储存方式最快的方法(-n>>>0)
- **void 运算**
  - 表示方法：void(x)或 void x
  - 主要用途是在浏览器超链接中防止跳转
    ```html
    <!-- 提交表单而使页面不跳转 -->
    <a href="javascript:void(document.form.submit())">提交</a>
    ```
- **逗号运算符**
  - 返回最后一个表达式的值
- **运算符优先级**

### 数据类型

- **强制类型转换**
  - Number()
    - 非数字字符串=>NaN
    - undefined=>NaN
    - 对象=>NaN，但一个数值的数组除外=>该数值
    - 空串、false、null、[]=>0
    - 当 valueOf()值为原始值时，使用 valueOf()，否则使用 toString()
  - String()
    - 原始值转为相对应的值
    - 对象返回一个类型的字符串
    - 数组返回数组的字符串形式(1,2,3...)
    - String 转换原则，先使用 toString，不是原始类型再使用 valueOf
  - Boolean()
    - 6 种 false 值：undefined、null、0、''、false、NaN
- **自动转换**
  - 自动转为布尔值
  - 字符串的拼接
  - 自动转为数值系统会调用 Number 函数，null 为 0，undefined 为 NaN

### 错误处理

- **所有错误都是 new Error(message)的实例**
  - Error 实例对象的属性
    - message：错误提示信息
    - name：错误名称
    - stack：错误堆栈(错误的位置，从内到外)
- **原生错误类型**
  - SyntaxError：解析时发生的语法错误
  - ReferenceError：引用不存在的变量，将一个值分配给无法分配的对象
  - RangeRrror：值超出有效范围，包括数组长度为负数、Number 对象的参数超出范围、函数堆栈超出最大值
  - TypeError：变量/参数不是预期类型，比如 new
  - URIError：当 URI 相关函数参数不正确时发生，有 encodeURI、decodeURI、encodeURIComponent、decodeURIComponent、escape、unescape
  - EvalError：eval 函数未正确执行
- **自定义错误**

  - 实例

    ```javascript
    function UserError(msg) {
      this.msg = msg | "默认错误信息";
      this.name = "自定义错误";
    }

    UserError.prototype = new Error();
    UserError.prototype.constructor = UserError;

    new UserError("哈哈，我出错了");
    ```

- **throw 语句**
  - 手动中断程序
  - 可抛出任何错误（包括自定义错误）
  - 可抛出任意类型的值
- **try...catch**
  - 若有错误，try 代码块抛出错误
  - catch 接受一个参数为 try 抛出的值，进行错误的处理
  - catch 代码块内还可以抛出错误使用 try...catch 嵌套结构
  - 允许添加 finally 代码块，在中断执行之前执行

### 编码风格

- 循环/判断体代码只有一行，可省略，多行不可省略
- 括号的写法
  ```javscript
  // good
  return {
      // ...
  };
  // bad
  return
  {
      // ...
  };
  ```
- 空格的写法
  - 函数调用与定义：函数名与括号无空格
  - 其他情况：与左括号有空格
- 分号
  - while 和 for 循环省略分号，do...while 不能省略
  - if、switch、try 省略分号
  - 函数声明省略分号
  - 除此之外所有语句都应该使用分号
  - 不能省略分号的原因
    - JS 引擎自动添加分号的行为难以预测
    - JS 代码压缩器不会自动添加分号
    - 导致脚本合并出错，所以有些代码首行之前有一个分号
- 全局变量
  - 对于任何代码块都是可读可写
  - 建议使用大写字母表示全局变量
- 变量声明
  - 为了避免出现问题，应该将可能出现的变量声明放在代码块头部
- with：建议不要使用 with 语句
- 建议使用全相等
- 自增自减用+/-=代替
- 用对象代替 switch 结构

### console 对象

- **console.log**：接受多个参数，第一个参数可为格式化字符串，%c 表示 CSS 格式字符串
  ```javascript
  console.log(
    "%cHello, world!",
    "color: red;background-color: yellow; font-size: 36px;"
  );
  ```
- console.info()为 log 的别名
- console.debug()输出信息只有在 verbose 打开时才会显示
- console 所有的方法都可以重写
- console.warn、console.error
- console.table 将复合型数据转为表格显示
- console.count 用于表示调用了多少次
- console.dir(obj)用于对一个对象进行检查，并用易于阅读的形式输出
- console.dirxml()以目录树的形式输出
- console.assert(表达式, info)只有表达式为假时，才输出 info
- **console.time()和 console.timeEnd()用于计算一个操作所花费的时间**
- 控制台命令 API
  - **\$\_**：返回上一个表达式的值
  - **\$(selector)**：返回第一个匹配的元素
  - **\$\$(selector)**：返回选中的 DOM 对象，同 querySelectorAll()
  - keys(object)/values(objcet)：返回包含 key/value 的数组
- debugger 语句：用于设置断点除错，没有除错工具时，不会产生任何影响，chrome 运行到 debugger 时，会自动暂停并打开相应的源码界面
